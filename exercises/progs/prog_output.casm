[ap + 0] = [fp + -3], ap++;
[ap + 0] = 10, ap++;
call rel 42;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 10, ap++;
call rel 37;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
call rel 67;
jmp rel 16 if [ap + -1] != 0;
ap += 4;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 104258483950883055767837868997866434864, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -5] + 1, ap++;
ret;
[ap + 0] = 40876966852591974785504727322685773721904, ap++;
call rel 122;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
%{ memory[ap + 0] = memory[fp + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[fp + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[fp + -4] + 0], ap++;
[ap + 3] = [[fp + -4] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[fp + -3] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[fp + -4] + 2];
jmp rel 14 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[fp + -3] = [[fp + -4] + 0];
ap += 5;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
jmp rel 6;
[ap + 0] = [fp + -4] + 3, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -4], ap++;
ret;
ap += 1;
[fp + -5] = [ap + 1] + [fp + -3], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 11;
[ap + -1] = [[fp + -7] + 0];
ap += 1;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 6;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = 1, ap++;
[fp + 0] = [ap + -2];
jmp rel 45 if [ap + -1] != 0;
[fp + -5] = [ap + 0] + [fp + -3], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 6;
[ap + 0] = 0, ap++;
jmp rel 4;
[ap + 0] = 1, ap++;
jmp rel 9 if [ap + -1] != 0;
ap += 3;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = 0, ap++;
jmp rel 23;
[fp + -6] = [ap + 1] + [fp + -4], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + 0] + 0];
jmp rel 11;
[ap + -1] = [[fp + 0] + 0];
ap += 1;
[ap + 0] = [fp + 0] + 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 6;
[ap + 0] = [fp + 0] + 1, ap++;
[ap + 0] = 1, ap++;
jmp rel 7;
ap += 5;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[fp + -3] = [[ap + -1] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [ap + -2] + 1, ap++;
%{
start = memory[ap + -2]
end = memory[ap + -1]
for i in range(start, end):
    print(memory[i])
%}
ap += 0;
ret;
